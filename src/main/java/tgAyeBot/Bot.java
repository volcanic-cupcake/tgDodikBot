package tgAyeBot;




import java.io.FileNotFoundException;
import java.io.IOException;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import com.pengrad.telegrambot.TelegramBot;
import com.pengrad.telegrambot.model.Chat.Type;
import com.pengrad.telegrambot.model.ChatMember;
import com.pengrad.telegrambot.model.Message;
import com.pengrad.telegrambot.model.Update;
import com.pengrad.telegrambot.model.User;
import com.pengrad.telegrambot.request.GetChatMember;
import com.pengrad.telegrambot.request.GetMe;
import com.pengrad.telegrambot.request.GetUpdates;
import com.pengrad.telegrambot.request.SendContact;
import com.pengrad.telegrambot.request.SendMessage;
import com.pengrad.telegrambot.response.GetChatMemberResponse;
import com.pengrad.telegrambot.response.GetMeResponse;
import com.pengrad.telegrambot.response.GetUpdatesResponse;

import tgAyeBot.Command.CommandType;


public class Bot extends TelegramBot {
	
	private final User ME = botGetMe(); 
	private final String USERNAME = "@" + ME.username();
	List<BotChat> chats = new ArrayList<BotChat>();
	List<Long> banned = readBanned();
	
	public Bot(String token) {
		super(token);
	}
	
	public static ZonedDateTime uaDateTimeNow() {
		Instant instant = Instant.now();
		ZoneId zoneId = ZoneId.of("Europe/Kiev");
		ZonedDateTime zdt = ZonedDateTime.ofInstant(instant, zoneId);
		return zdt;
	}
	public static ZonedDateTime uaDateTime(String dateString) { //accepts dd.MM format
		dateString = dateString.strip();
		int dayInput = 0;
		int monthInput = 0;
		try {
			dayInput = Integer.parseInt(dateString.substring(0, 2));
			monthInput = Integer.parseInt(dateString.substring(3));
		}
		catch (NumberFormatException | StringIndexOutOfBoundsException e) {
			return null;
		}
		
		ZoneId zoneId = ZoneId.of("Europe/Kiev");
		ZonedDateTime now = uaDateTimeNow();
		
		int monthNow = now.getMonthValue();
		int dayNow = now.getDayOfMonth();
		boolean isThisYear = monthInput > monthNow || (monthInput == monthNow && dayInput > dayNow);
		
		int year;
		if (isThisYear) year = now.getYear();
		else year = now.getYear() + 1;
		
		ZonedDateTime zdt;
		try {
			zdt = ZonedDateTime.of(year, monthInput, dayInput, 0, 0, 0, 0, zoneId);
		}
		catch (DateTimeException e) {
			zdt = null;
		}
		return zdt;
	}
	
	public static long congratulateDelay(int hour) {
		ZonedDateTime now = uaDateTimeNow();
		long nowEpoch = now.toEpochSecond();
		int i = 0;
		while (now.plusHours(i).getHour() != hour) {
			i++;
		}
		
		long targetEpoch = now.plusHours(i).toEpochSecond();
		long difference = targetEpoch - nowEpoch;
		long toMilli = difference * 1000;
		
		return toMilli;
	}
	
	public SendMessage helpMessage(long chatId) {
		String text =
				"üî∂–£–°–Ü –ß–ê–¢–òüî∂\n"
				+ "/help - —á–∏—Ç –Ω–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–∫–∏ –±—Ä–∞–≤–ª —Å—Ç–∞—Ä—Å\n"
				+ "/joke - —Ä–∞–Ω–¥–æ–º–Ω–∏–π –∞–Ω–µ–∫–¥–æ—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
				+ "/youtube - –ø–ª–µ–π–ª–∏—Å—Ç –∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º –Ω–∞ –Æ—Ç—É–±—ñ\n"
				+ "/privacy - —è–∫—ñ –¥–∞–Ω–Ω—ñ —è –∑–±–∏—Ä–∞—é\n"
				+ "/info - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ–µ–∫—Ç\n"
				+ "/creator - –∞–≤—Ç–æ—Ä –±–æ—Ç–∞\n"
				+ "/report - –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø–æ—Ä—É—à–µ–Ω–Ω—è\n"
				+ "/github - —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –Ω–∞ GitHub\n"
				+ "/russian_warship - –∫–ª–∞—Å–∏–∫–∞\n"
				+ "\n"
				
				+ "üî∂–î–ò–†–ï–ö–¢ –ó–Ü –ú–ù–û–Æüî∂\n"
				+ "/cancel - –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –æ–ø–µ—Ä–∞—Ü—ñ—é\n"
				+ "/anonymous - –∞–Ω–æ–Ω—ñ–º–Ω–∏–π —Ä–µ–∂–∏–º\n"
				+ "/setbirthday - –∑–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è\n"
				+ "/mybirthdays - —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è–º–∏\n"
				+ "/setjoke - –¥–æ–¥–∞—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç –¥–æ —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞\n"
				+ "\n"
				
				+ "üî∂–ì–†–£–ü–û–í–Ü –ß–ê–¢–òüî∂\n"
				+ "/insult - –æ–±—Ä–∞–∑–∏—Ç–∏ —Ä–∞–Ω–¥–æ–º–Ω—É –ª—é–¥–∏–Ω—É\n"
				+ "\n"
				
				+ "‚ùóÔ∏è–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É‚ùóÔ∏è\n"
				+ "—è–∫—â–æ –≤–∏ –±—É–¥–µ—Ç–µ –∑–ª–æ–≤–∂–∏–≤–∞—Ç–∏ –¥–µ—è–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏, –≤–∞–º –±—É–¥–µ –Ω–∞–∑–∞–≤–∂–¥–∏ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ "
				+ "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º\n";
		SendMessage send = new SendMessage(chatId, text);
		return send;
	}
	public void sendMyBirthdays(long fromId, long chatId) throws FileNotFoundException {
		List<Birthday> allBirthdays = Birthday.readBirthdays();
		List<Birthday> myBirthdays = new ArrayList<Birthday>();
		for (Birthday birthday : allBirthdays) {
			boolean authorMatch = birthday.authorId() == fromId;
			boolean isDisplayed = birthday.isDisplayed();
			if (authorMatch && !isDisplayed) myBirthdays.add(birthday);
		}
		
		String output;
		if (myBirthdays.isEmpty()) {
			output = "–ü—É—Å—Ç–æ, –ø—Ä—è–º–æ —è–∫ —É –º–æ—Å–∫–∞–ª—è–∫–∏ –≤ –≥–æ–ª–æ–≤—ñ!";
		}
		else {
			output = myBirthdaysToText(myBirthdays);
		}
		
		List<Congrat> list = new ArrayList<Congrat>();
		Congrat congrats = new Congrat(chatId, output);
		list.add(congrats);
		
		secureCongratsSend(list);
	}
	
	public Command[] commands() {
		Bot bot = this;
		//List<Command> commands = new ArrayList<Command>();
		
		Command help = new Command(CommandType.PRIVATE_AND_GROUP, true, "/help") {
			@Override
			public void execute(Message message) {
				long chatId = message.chat().id();
				SendMessage send = helpMessage(chatId);
				bot.execute(send);
			}
		};
		
		Command joke = new Command(CommandType.PRIVATE_AND_GROUP, true, "/joke") {
			@Override
			public void execute(Message message) {
				long chatId = message.chat().id();
				List<Joke> jokes = null;
				try {
					jokes = Joke.readJokes();
				} catch (FileNotFoundException e) {}
				
				Random random = new Random();
				int rndIndex = random.nextInt( jokes.size() );
				Joke joke = jokes.get(rndIndex);
				
				String messageText =
						  "üî∏" + joke.authorName() + "üî∏\n"
						+ "\n"
						+ joke.text();
				SendMessage send = new SendMessage(chatId, messageText);
				bot.execute(send);
			}
		};
		
		Command privacy = new Command(CommandType.PRIVATE_AND_GROUP, true, "/privacy") {
			@Override
			public void execute(Message message) {
				long chatId = message.chat().id();
				String text =
						  "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ–Ω–µ, –≤–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—è, —â–æ —è –∑–±–µ—Ä—ñ–≥–∞—é –ø–µ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –í–∞—Å:\n"
						+ "\n"
						+ "üîπ–¥–∞–Ω–Ω—ñ –ø—Ä–æ —á–∞—Ç\n"
						+ "üîπ—Å–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤ —á–∞—Ç—É\n"
						+ "üîπ–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ, —è–∫—ñ –≤—Å—Ç—É–ø–∞—é—Ç—å –¥–æ —á–∞—Ç—É\n"
						+ "üîπ–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ, —è–∫—ñ –ø–æ–∫–∏–¥–∞—é—Ç—å —á–∞—Ç\n"
						+ "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n"
						
						+ "–Ø –≤ –∂–æ–¥–Ω–æ–º—É —Ä–∞–∑—ñ –ù–ï –∑–±–µ—Ä—ñ–≥–∞—é:\n"
						+ "\n"
						+ "üîª–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
						+ "üîª–ø–∞—Ä–æ–ª—å –≤—ñ–¥ –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É –±—Ä–∞–≤–ª —Å—Ç–∞—Ä—Å\n";
				SendMessage send = new SendMessage(chatId, text);
				bot.execute(send);
			}
		};
		
		Command creator = new Command(CommandType.PRIVATE_AND_GROUP, true, "/creator") {
			@Override
			public void execute(Message message) {
				long chatId = message.chat().id();
				String phoneNumber = "+380672704424";
				String firstName = "–Ñ–≥–æ—Ä";
				SendContact contact = new SendContact(chatId, phoneNumber, firstName);
				bot.execute(contact);
			}
		};
		
		Command info = new Command(CommandType.PRIVATE_AND_GROUP, true, "/info") {
			@Override
			public void execute(Message message) {
				long chatId = message.chat().id();
				String text =
						  "–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –Ñ–≥–æ—Ä, –º–µ–Ω—ñ 16 —Ä–æ–∫—ñ–≤ —ñ —è –∞–≤—Ç–æ—Ä —Ü—å–æ–≥–æ –±–æ—Ç–∞ :D"
						+ "\n\n"
						+ "üî∏—Ü–µ–π –ø—Ä–æ–µ–∫—Ç –º–∞—î –ª–∏—à–µ —Ä–æ–∑–≤–∞–∂–∞–ª—å–Ω–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä"
						+ "\n\n"
						+ "üî∏–ø—Ä–æ–µ–∫—Ç —î –ø–æ–≤–Ω—ñ—Å—Ç—é open-source"
						+ "\n\n"
						+ "üî∏–º–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è: Java"
						+ "\n\n"
						+ "üî∏–≤–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–ª—å–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º–æ—é —Ä–æ–±–æ—Ç—É"
						+ "\n\n"
						+ "üî∏–æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –∫–æ–¥ –º–æ–∂–Ω–∞ —Ç—É—Ç /github"
						+ "\n\n"
						+ "üî∏–ø—Ä–æ—à—É –ø–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏ –º–µ–Ω—ñ –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏ /creator"
						+ "\n\n"
						+ "üî∏–ø—É—Ç—ñ–Ω —Ö—É–π–ª–æ"
						+ "\n\n"
						+ "–î—è–∫—É—é –∑–∞ —É–≤–∞–≥—É!";
				SendMessage send = new SendMessage(chatId, text);
				bot.execute(send);
			}
		};
		
		Command report = new Command(CommandType.PRIVATE_AND_GROUP, true, "/report") {
			@Override
			public void execute (Message message) {
				long chatId = message.chat().id();
				String text =
						  "–ü—Ä–æ—Ö–∞–Ω–Ω—è –ø—Ä–æ —É—Å—ñ –ø—Ä–æ–±–ª–µ–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏ –º–µ–Ω—ñ —É —Ç–µ–ª–µ–≥—Ä–∞–º\n"
						+ "/creator\n";
				SendMessage send = new SendMessage(chatId, text);
				bot.execute(send);
			}
		};
		
		Command github = new Command(CommandType.PRIVATE_AND_GROUP, true, "/github") {
			@Override
			public void execute (Message message) {
				long chatId = message.chat().id();
				String link = "https://github.com/volcanic-cupcake/tgDodikBot";
				SendMessage send = new SendMessage(chatId, link)
						.disableWebPagePreview(true);
				bot.execute(send);
			}
		};
		
		Command youtube = new Command(CommandType.PRIVATE_AND_GROUP, true, "/youtube") {
			@Override
			public void execute(Message message) {
				long chatId = message.chat().id();
				String link = "https://youtube.com/playlist?list=PL8C2JQ0S1cyNUdJE2PKJDmBq_l0Ibcwon";
				SendMessage send = new SendMessage(chatId, link)
						.disableWebPagePreview(true);
				bot.execute(send);
			}
		};
		
		Command russian_warship = new Command(CommandType.PRIVATE_AND_GROUP, true, "/russian_warship") {
			@Override
			public void execute(Message message) {
				long chatId = message.chat().id();
				int messageId = message.messageId();
				String text = "–†—É—Å—Å–∫–∏–π –≤–æ–µ–Ω–Ω—ã–π –∫–æ—Ä–∞–±–ª—å, –∏–¥–∏ –Ω–∞—Ö—É–π!";
				SendMessage send = new SendMessage(chatId, text)
						.replyToMessageId(messageId);
				bot.execute(send);
			}
		};
		
		Command start = new Command(CommandType.PRIVATE, true, "/start") {
			@Override
			public void execute(Message message) {
				long chatId = message.chat().id();
				SendMessage send = helpMessage(chatId);
				bot.execute(send);
			}
		};
		
		Command cancel = new Command(CommandType.PRIVATE, true, "/cancel") {
			@Override
			public void execute(Message message) {
				int messageId = message.messageId();
				long chatId = message.chat().id();
				
				SendMessage send = new SendMessage(chatId, "–≥–∞—Ä–∞–∑–¥")
						.replyToMessageId(messageId);
				bot.execute(send);
			}
		};
		
		Command anonymous = new Command(CommandType.PRIVATE, false, "/anonymous") {
			@Override
			public void execute(Message message) {
				long fromId = message.from().id();
				long chatId = message.chat().id();
				List<Long> anonymous = null;
				try {
					anonymous = readAnonymous();
				} catch (FileNotFoundException e) {}
				
				boolean isEnabled = anonymous.contains(fromId);
				String output;
				if (isEnabled) {
					anonymous.remove(fromId);
					try {
						writeAnonymous(anonymous);
					} catch (IOException e) {}
					
					output = "–í–∏ –±—ñ–ª—å—à–µ –Ω–µ –∞–Ω–æ–Ω—ñ–º—É—Å :o"; 
				}
				else {
					anonymous.add(fromId);
					try {
						writeAnonymous(anonymous);
					} catch (IOException e) {}
					
					output = "–í–∏ —Ç–µ–ø–µ—Ä –∞–Ω–æ–Ω—ñ–º—É—Å :D";
				}
				
				SendMessage send = new SendMessage(chatId, output);
				bot.execute(send);
			}
		};
		
		Command my_birthdays = new Command(CommandType.PRIVATE, true, "/mybirthdays") {
			@Override
			public void execute(Message message) {
				long fromId = message.from().id();
				long chatId = message.chat().id();
				
				try {
					sendMyBirthdays(fromId, chatId);
				} catch (FileNotFoundException e) {}
				
			}
		};
		
		Command set_birthday = new Command(CommandType.PRIVATE, true, "/setbirthday") {
			@Override
			public void execute(Message message) {
				User from = message.from();
				long fromId = from.id();
				long chatId = message.chat().id();
				
				String fullName = "";
				String firstName = from.firstName();
				String lastName = from.lastName();
				if (firstName != null) fullName += firstName;
				if (lastName != null) fullName += " " + lastName;
				ZonedDateTime now = uaDateTimeNow();
				
				List<SetBirthdaySession> bdaySessions = SessionStore.setBirthday();
				
				SetBirthdaySession newSession = new SetBirthdaySession(now, fromId, fullName);
				bdaySessions.add(newSession);
				
				String text =
						 	"–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç –¥—Ä—É–≥–∞, —è–∫–æ–≥–æ –º–∏ –ø—Ä–∏–≤—ñ—Ç–∞—î–º–æ\n"
						  + "\n"
						  + "–¢–∞–∫–æ–∂ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ—Å–ª–∞—Ç–∏ —Å—é–¥–∏ –±—É–¥—å-—è–∫–µ –π–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è :)\n"
						  + "\n"
						  + "–ü–∞–º'—è—Ç–∞–π—Ç–µ! –Ø –Ω–∞–¥—ñ—à–ª—é –≤–∞—à–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —É —á–∞—Ç–∏, –¥–µ –ø–æ–±–∞—á—É "
						  + "—Ü—é –ª—é–¥–∏–Ω—É, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤–∞—Å —Ç–∞–º –Ω–µ–º–∞—î.\n"
						  + "\n"
						  + "–¢–∞–∫–æ–∂ —É—Å—ñ–º –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç—å—Å—è –≤–∞—à–µ —ñ–º'—è, –∞–ª–µ –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–º–∫–Ω—É—Ç–∏ "
						  + "–∞–Ω–æ–Ω—ñ–º–Ω–∏–π —Ä–µ–∂–∏–º –∫–æ–º–∞–Ω–¥–æ—é /anonymous\n"
						  + "\n"
						  + "–Ø–∫—â–æ –≤–∏ –≤–∫–∞–∂–µ—Ç–µ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—é –¥–∞—Ç—É, –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –ø—Ä–∏–π–¥–µ "
						  + "–Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–æ–∫—É, –∞–¥–∂–µ –ø—Ä–æ –î–µ–Ω—å –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥—Ä—É–∑—ñ–≤ —Ç—Ä–µ–±–∞ "
						  + "–ø–∞–º'—è—Ç–∞—Ç–∏ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å :o";
				SendMessage send = new SendMessage(chatId, text);
				bot.execute(send);
			}
		};
		
		Command set_joke = new Command(CommandType.PRIVATE, true, "/setjoke") {
			@Override
			public void execute(Message message) {
				User from = message.from();
				long fromId = from.id();
				long chatId = message.chat().id();
				
				String fullName = getUserFullName(from);
				ZonedDateTime now = uaDateTimeNow();
				
				List<SetJokeSession> jokeSessions = SessionStore.setJoke();
				
				SetJokeSession newSession = new SetJokeSession(now, fromId, fullName);
				jokeSessions.add(newSession);
				
				String text =
					 	"–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –±—É–¥—å-—è–∫–∏–π –∞–Ω–µ–∫–¥–æ—Ç :D\n"
					  + "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤: 3700\n"
					  + "\n"
					  + "–ü–∞–º'—è—Ç–∞–π—Ç–µ, —É—Å—ñ–º –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç—å—Å—è –≤–∞—à–µ —ñ–º'—è, –∞–ª–µ –≤–∏ –º–æ–∂–µ—Ç–µ —É–º—ñ–º–∫–Ω—É—Ç–∏ "
					  + "–∞–Ω–æ–Ω—ñ–º–Ω–∏–π —Ä–µ–∂–∏–º –∫–æ–º–∞–Ω–¥–æ—é /anonymous\n";
				SendMessage send = new SendMessage(chatId, text);
				bot.execute(send);
			}
		};
		
		Command insult = new Command(CommandType.GROUP, true, "/insult") {
			@Override
			public void execute (Message message) {
				long chatId = message.chat().id();
				User user = randomChatMember(chatId).user();
				String fullName = getUserFullName(user);
				
				String offend1 = "—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–æ –Ω–µ –≥—Ä–∞—î—à —É –ì–µ–Ω—à–∏–Ω?";
				String offend2 =
						    "—â–æ–± –æ–ø—É—Å—Ç–∏—Ç–∏—Å—è –¥–æ —Ç–≤–æ–≥–æ —Ä—ñ–≤–Ω—è, "
						    + "–º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç–∏—Å—è –∫—Ä—ñ–∑—å –∑–µ–º–ª—é";
				String offend3 = "–±–∞—á–∏—à –ø–ª—ñ–Ω—Ç—É—Å? –û—Å—å, —Ü–µ —è–∫—Ä–∞–∑ —Ç–≤—ñ–π —Ä—ñ–≤–µ–Ω—å";
				String offend4 = "—á—É–¥–æ–≤–æ –ø–∞—Ö–Ω–µ—à\n\n–ù–∞—ó–±–∞–≤. –í–∞–Ω—è—î—à, —è–∫ —Å–≤–∏–Ω—é–∫–∞ —É –±–∞–≥–Ω—é—Ü—ñ!";
				String offend5 = "–Ω–µ—Ö–∞–π —Ç–≤—ñ–π –±–∞—Ç—å–∫–æ –Ω–∞–¥–∞–ª—ñ –±—É–¥–µ –æ–±–µ—Ä–µ–∂–Ω–∏–π. –ü–æ—Ç—Ä—ñ–±–Ω–æ –±–µ—Ä–µ–≥—Ç–∏—Å—è, "
						+ "—â–æ–± –Ω–∞ —Å–≤—ñ—Ç –Ω–µ –∑‚Äô—è–≤–ª—è–ª–∏—Å—è —Ç–∞–∫—ñ –≤–∏—Ä–æ–¥–∫–∏, —è–∫ —Ç–∏";
				String offend6 = "—Å–≤–æ—î—é –∫—Ä–∞—Å–æ—é —Ç–∏ –±–∏ —è–≤–Ω–æ —Å–≤—ñ—Ç –Ω–µ –≤—Ä—è—Ç—É–≤–∞–≤";
				String offend7 = "—Ç–∏ –ø–æ–≥–∞–Ω–æ —Å–µ–±–µ –ø–æ—á—É–≤–∞—î—à –∞–±–æ –≤–∏–≥–ª—è–¥–∞—î—à —Ç–∞–∫ –∑–∞–≤–∂–¥–∏?";
				String offend8 = "–ø—Ä–∏—Ä–æ–¥–∞ –≤–∏—Ä—ñ—à–∏–ª–∞ –Ω–∞–¥ —Ç–æ–±–æ—é –æ—Å–æ–±–ª–∏–≤–æ –Ω–µ –º–æ—Ä–æ—á–∏—Ç–∏—Å—è";
				String offend9 = "—è –± —Ç–µ–±–µ –æ–±—Ä–∞–∑–∏–≤, –∞–ª–µ –¥—É–º–∞—é, —Ç–µ–±–µ –¥–∑–µ—Ä–∫–∞–ª–æ –∫–æ–∂–µ–Ω –¥–µ–Ω—å –æ–±—Ä–∞–∂–∞—î";
				String offend10 = "—Å–ø–æ–¥—ñ–≤–∞—é—Å—è, —Ç–∏ –Ω–µ –∑–∞–≤–∂–¥–∏ —Ç–∞–∫–∏–π –¥—É—Ä–Ω–∏–π, –∞ –ª–∏—à–µ —Å—å–æ–≥–æ–¥–Ω—ñ";
				String offend11 = "—Ç–æ–±–æ—é –≤–∏–ø–∞–¥–∫–æ–≤–æ –≤ –¥–∏—Ç–∏–Ω—Å—Ç–≤—ñ –ë–∞–±–∞—è –Ω–µ –ª—è–∫–∞–ª–∏?";
				String offend12 = "—è–∫–±–∏ —É —Ç—É–ø–æ—Å—Ç—ñ –±—É–ª–∏ –∫—Ä–∏–ª–∞, —Ç–∏ –±–∏ –ø—É—Ä—Ö–∞–≤, —è–∫ –º–µ—Ç–µ–ª–∏–∫";
				String offend13 = "–≤ –≤–∞—Å –∑ —Ä–æ—Å—ñ–π—Å—å–∫–∏–º –∫–æ—Ä–∞–±–ª–µ–º –±–∞–≥–∞—Ç–æ —Å–ø—ñ–ª—å–Ω–æ–≥–æ. –í–∏ –æ–±–∏–¥–≤–∞ "
						+ "–π–¥–µ—Ç–µ –Ω–∞—Ö—É–π.";
				String offend14 = "—è –Ω–∞–≤—ñ—Ç—å –∂–∞—Ä—Ç –≤–∏–≥–∞–¥—É–≤–∞—Ç–∏ –Ω–µ –±—É–¥—É, –ø—Ä–æ—Å—Ç–æ –π–¥–∏ –Ω–∞—Ö—É–π";
				String offend15 = "—è–∫—â–æ –± —è –Ω–µ –±—É–≤ –±–æ—Ç–æ–º, –Ω–∞—á–∏—Å—Ç–∏–≤ –±–∏ —Ç–æ–±—ñ –º–æ—Ä–¥—É";
				String offend16 = "—è —Å–ø–æ—á–∞—Ç–∫—É —Ä–∞—Ö—É–≤–∞–≤ —Å–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ —Ç–µ–±–µ —Ä–æ–Ω—è–ª–∏ —É –¥–∏—Ç–∏–Ω—Å—Ç–≤—ñ, "
						+ "–∞–ª–µ –Ω–∞ 100-–º—É —Ä–∞–∑—ñ –∑–±–∏–≤—Å—è";
				String offend17 = "–π–¥–∏ –Ω–∞ —Ç—Ä–∏ —Ö—É—è, —Ç–∏ –ø–∏–∑–¥–∞ –Ω–µ—Ç—Ä–∞—Ö–∞–Ω–∞.";
				String offend18 = "–±—É–≤ –±–∏ —Ç–∏ –Ω–µ–≥—Ä–æ–º, —è –± —Ç–µ–±–µ –≤—ñ–¥—Ä–∞–∑—É –ø—Ä–æ–¥–∞–≤";
				String offend19 = "–≤—ñ–¥ —Ç–µ–±–µ –ª–∞–π–Ω–æ–º –≤–∞–Ω—è—î";
				String offend20 = "—Ç–∏ –º–µ–Ω–µ –±—ñ—Å–∏—à, –π–¥–∏ –≤—Ç–æ–ø–∏—Å—è";
				
				String offends[] = {
						offend1, offend2, offend3, offend4, offend5, offend6,
						offend7, offend8, offend9, offend10, offend11, offend12,
						offend13, offend14, offend15, offend16, offend17, offend18,
						offend19, offend20
				};
				
				Random random = new Random();
				int rndIndex = random.nextInt(offends.length);
				
				String text = fullName + ", " + offends[rndIndex];
				SendMessage send = new SendMessage(chatId, text);
				bot.execute(send);
			}
		};
		
		Command[] commands = {
				help, creator, info, report, github, youtube, russian_warship, start,
				cancel, anonymous,
				set_birthday, my_birthdays, set_joke, joke, privacy, insult
		};
		return commands;
	}
	
	public static List<Long> readAnonymous() throws FileNotFoundException {
		List<String> lines = TextFile.readLines(Resource.anonymousMode.path);
		List<Long> ids = new ArrayList<Long>();
		for (String line : lines) {
			ids.add( Long.parseLong(line) );
		}
		return ids;
	}
	public static List<Long> readBanned() {
		List<String> lines = null;
		try {	lines = TextFile.readLines(Resource.banned.path);	}
		catch (FileNotFoundException e) {}
		
		List<Long> ids = new ArrayList<Long>();
		for (String line : lines) {
			ids.add( Long.parseLong(line) );
		}
		return ids;
	}
	
	public static void writeAnonymous(List<Long> ids) throws IOException {
		List<String> lines = new ArrayList<String>();
		String line;
		for (long id : ids) {
			line = Long.toString(id);
			lines.add(line);
		}
		TextFile.writeLines(Resource.anonymousMode.path, lines, false);
	}

	public void secureTextSend(long chatId, String text) {
		final int MAX_LENGTH = 4096;
		
		if (text.length() <= MAX_LENGTH) {
			SendMessage send = new SendMessage(chatId, text);
			this.execute(send);
		}
		else { //sending multiple messages
			Bot bot = this;
			new Thread(() -> {
				String localText = text;
				
				int num = localText.length() / MAX_LENGTH;
				int leftNum = localText.length() % MAX_LENGTH;
				
				String temp;
				for (int i = 0; i < num; i++) {
					temp = localText.substring(0, MAX_LENGTH);
					localText = localText.substring(MAX_LENGTH, localText.length());
					
					SendMessage send = new SendMessage(chatId, temp);
					this.execute(send);
					
					try {	Thread.sleep(10000);	}
					catch (InterruptedException e) {}
				}
				
				if (leftNum != 0) {
					SendMessage send = new SendMessage(chatId, localText);
					bot.execute(send);
				}
			}).start();
		}
	}
	
	private void secureCongratsSend(List<Congrat> congrats) {
		Bot bot = this;
		new Thread(() -> {
			final int MAX_LENGTH = 4096;
			final int SLEEP_TIME = 10000;
			for (Congrat congrat : congrats) {
				
				long chatId = congrat.chatId();
				String text = congrat.text();
				
				if (text.length() <= MAX_LENGTH) {
					SendMessage send = new SendMessage(chatId, text);
					bot.execute(send);
					try {	Thread.sleep(SLEEP_TIME);	}
					catch (InterruptedException e) {}
				}
				else {
					String[] lines = text.split("\n");
					String temp = "";
					for (int i = 0; i < lines.length; i++) {
						String line = lines[i];
						temp += line + "\n";
						
						boolean lastIteration = i == lines.length - 1;
						boolean isLongEnough = temp.length() > 3700;
						
						if (!lastIteration && isLongEnough) {
							SendMessage send = new SendMessage(chatId, temp);
							bot.execute(send);
							temp = "";
							
							try {	Thread.sleep(SLEEP_TIME);	}
							catch (InterruptedException e) {}
						}
						else if (lastIteration) {
							SendMessage send = new SendMessage(chatId, temp);
							bot.execute(send);
							
							try {	Thread.sleep(SLEEP_TIME);	}
							catch (InterruptedException e) {}
						}		
					}
				}
			}
		}).start();
	}
	
	public boolean userIsAnonymous(long userId) throws FileNotFoundException {
		List<Long> anonymousList = Bot.readAnonymous();
		boolean anonymous = anonymousList.contains(userId);
		return anonymous;
	}
	
	private boolean chatMemberExists(ChatMember member) {
		boolean isNull = member == null;
		boolean isLeft = false;
		boolean isKicked = false;
		
		if (!isNull) {
			switch(member.status()) {
			case left:
				isLeft = true;
				break;
			case kicked:
				isKicked = true;
				break;
			default:
				break;
			}
		}
		
		boolean exists = !isNull && !(isLeft || isKicked);
		return exists;
	}
	private boolean chatMemberExists(long chatId, long userId) {
		GetChatMember request = new GetChatMember(chatId, userId);
    	GetChatMemberResponse getChatMemberResponse = this.execute(request);
    	ChatMember member = getChatMemberResponse.chatMember();
		
		boolean isNull = member == null;
		boolean isLeft = false;
		boolean isKicked = false;
		
		if (!isNull) {
			switch(member.status()) {
			case left:
				isLeft = true;
				break;
			case kicked:
				isKicked = true;
				break;
			default:
				break;
			}
		}
		
		boolean exists = !isNull && !(isLeft || isKicked);
		return exists;
	}
	
	private User getChatUser(long chatId, long userId) {
		GetChatMember request = new GetChatMember(chatId, userId);
    	GetChatMemberResponse getChatMemberResponse = this.execute(request);
    	ChatMember member = getChatMemberResponse.chatMember();
    	
    	if (member != null) return member.user();
    	else return null;
	}
	
	private String getUserFullName(User user) {
		String fullName = "";
		String firstName = user.firstName();
		String lastName = user.lastName();
		if (lastName == null) fullName += firstName;
		else fullName += firstName + " " + lastName;
		
		return fullName;
	}
	
	private ChatMember randomChatMember(long chatId) {
		ChatMember member = null;
		for (BotChat chat : this.chats) {
			if (chat.id() == chatId) {
				List<Long> chatMembers = chat.members();
				member = pickRandomChatMember(chatId, chatMembers);
				break;
			}
		}
		
		return member;
	}
	private ChatMember pickRandomChatMember(long chatId, List<Long> chatMembers) {
		Random random = new Random();
		int rndIndex = random.nextInt(chatMembers.size());
		long rndMemberId = chatMembers.get(rndIndex);
		
		GetChatMember request = new GetChatMember(chatId, rndMemberId);
    	GetChatMemberResponse getChatMemberResponse = this.execute(request);
    	ChatMember member = getChatMemberResponse.chatMember();
    	
    	boolean exists = chatMemberExists(member);
    	boolean isBot = exists && member.user().isBot();
    	if (exists && !isBot) return member;
    	else return pickRandomChatMember(chatId, chatMembers);
	}
	public User botGetMe() {
		GetMe request = new GetMe();
		GetMeResponse getMeResponse = this.execute(request);
		User me = getMeResponse.user();
		return me;
	}
	
	
	public String username() {
		return this.USERNAME;
	}
	public User me() {
		return this.ME;
	}
	
	private String zdtToString(ZonedDateTime zdt) {
		
		String day = Integer.toString( zdt.getDayOfMonth() );
		String month = Integer.toString( zdt.getMonthValue() );
		String year = Integer.toString( zdt.getYear() );
		
		if (day.length() != 2) day = "0" + day;
		if (month.length() != 2) month = "0" + month;
		
		String date = day + "." + month + "." + year;
		return date;
	}
	private String myBirthdaysToText (List<Birthday> myBirthdays) {
		String separator = "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _";
		int number = 1;
		String output = "";
		String date;
		String displayCommand;
		String removeCommand;
		for (Birthday birthday : myBirthdays) {
			date = zdtToString( birthday.birthdayDate() );
			displayCommand = "/birthdaytext_" + birthday.code();
			removeCommand = "/birthdayremove_" + birthday.code();
			
			output	+= separator + "\n\n"
					
					+ "#" + number + " [ " + birthday.contactName() + " ]\n"
					+ "–í–∏–¥–∞–ª–∏—Ç–∏: " + removeCommand + "\n\n"
					+ "–í–∞—à–µ —ñ–º'—è:\n"
					+ birthday.authorName() + "\n\n"
					+ "–î–∞—Ç–∞:\n"
					+ date + "\n\n"
					+ "–¢–µ–∫—Å—Ç: " + displayCommand + "\n";
			
			number++;
		}
		output += separator;
		
		return output;
	}
	
	public void confirmAllUpdates(MessageHandler handler) {
		GetUpdates getUnhandled = new GetUpdates();
		GetUpdatesResponse unhandledResponse = this.execute(getUnhandled);
		List<Update> unhandledList = unhandledResponse.updates();
		
		if (unhandledList != null) {
			int highestUpdateId = 0;
			for (Update unhandled : unhandledList) {
				Message message = unhandled.message();
				if (message != null) {
					Type type = message.chat().type();
					switch (type) {
					case group:
					case supergroup:
						try { handler.updateChatData(this.chats, message); }
			    		catch (IOException e) {}
						break;
					default:
						break;
					}
				}
				
				int updateId = unhandled.updateId();
				if (updateId > highestUpdateId) highestUpdateId = updateId;
			}
			
			GetUpdates confirmUnhandled = new GetUpdates()
					.offset(highestUpdateId + 1);
			this.execute(confirmUnhandled);
		}
	}
	
	public void congratulateToday() throws IOException {
		List<Birthday> today = Birthday.todayBirthdays();
		if (today != null) {
			List<BotChat> chats = this.chats;
			
			List<Congrat> congrats = new ArrayList<Congrat>();
			//for every chat we have
			for (BotChat chat : chats) {
				long chatId = chat.id();
				//for every chat member we have
				for (long memberId : chat.members()) {
					boolean memberExists = chatMemberExists(chatId, memberId);
					if (!memberExists) continue;
					
					
					String greetings = "";
					String separator = "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _";
					//for every birthday greeting we have today
					for (Birthday birthday : today) {
						long contactId = birthday.contactId();
						if (memberId == contactId) {
							greetings +=
									  separator + "\n\n"
									+ "üî∏" + birthday.authorName() + "üî∏" + "\n\n"
									+ "–ü–æ–¥–∏–≤–∏—Ç–∏—Å—è: /birthdaytext_" + birthday.code() + "\n";
						}
					}
					
					if (!greetings.contentEquals("")) {
						User user = getChatUser(chatId, memberId);
						String firstName = user.firstName();
						String lastName = user.lastName();
						String fullName;
						if (lastName == null) fullName = firstName;
						else fullName = firstName + " " + lastName;
						
						String intro = congratulateTodayIntro(firstName, fullName);
						String text = intro + greetings + separator;
						
						Congrat congrat = new Congrat(chatId, text);
						congrats.add(congrat);
					}
				}
			}
			
			if (!congrats.isEmpty()) secureCongratsSend(congrats);
		}
	}
	
	private String congratulateTodayIntro(String firstName, String fullName) {
		String text =
				  "–•–æ–±–∞–Ω–∞, –º–µ–Ω—ñ —Ç—É—Ç –ø–µ—Ä–µ–¥–∞–ª–∏, —â–æ –≤ üéâ" + fullName + "üéâ —Å—å–æ–≥–æ–¥–Ω—ñ –î–µ–Ω—å –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è!\n"
				+ "\n"
				+ firstName + ", —Ç–æ–±—ñ —Ç—É—Ç –¥–µ—Ö—Ç–æ –∑–∞–ª–∏—à–∏–≤ —Ç–µ–ø–ª—ñ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è\n"
				+ "—è –¥—É–º–∞—é, —Ç–≤–æ—ó –¥—Ä—É–∑—ñ —Ç–µ–±–µ —Å–ø—Ä–∞–≤–¥—ñ –ª—é–±–ª—è—Ç—å :)\n"
				+ "\n"
				+ "—Ö–æ—á —è —ñ –ø—Ä–æ—Å—Ç–æ –±–æ—Ç, –∞–ª–µ –≤ –º–µ–Ω–µ —Ç–∞–∫–æ–∂ —î –¥—É—à–∞, —Ç–æ–º—É —è –ø—Ä–∏—î–¥–Ω—É—é—Å—è –¥–æ —É—Å—ñ—Ö "
				+ "–ø—Ä–∏–≤—ñ—Ç–∞–Ω—å —Ç–∞ –±–∞–∂–∞—é —Ç–æ–±—ñ –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ü–µ–π –¥–µ–Ω—å :D\n";
		
		return text;
	}
}